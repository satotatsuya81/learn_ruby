import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import { BusinessCardListContainer } from '@/components/BusinessCardListContainer';
import { BusinessCard } from '@/types//BusinessCard';

// API mock
const mockDeleteBusinessCard = jest.fn();
jest.mock('@/utils/api', () => ({
  __esModule: true,
  deleteBusinessCard: (...args: any[]) => mockDeleteBusinessCard(...args)
}));

// useBusinessCardFilter mock
const mockUseBusinessCardFilter = jest.fn();
jest.mock('@/hooks/useBusinessCardFilter', () => ({
  useBusinessCardFilter: (...args: any[]) => mockUseBusinessCardFilter(...args)
}));

// useModal mock
const mockUseModal = jest.fn();
jest.mock('@/hooks/useModal', () => ({
  useModal: (...args: any[]) => mockUseModal(...args)
}));

// window.location.reload mock
const mockReload = jest.fn();
Object.defineProperty(window, 'location', {
  value: { reload: mockReload },
  writable: true
});

describe('BusinessCardListContainer', () => {
  const mockBusinessCards: BusinessCard[] = [
    {
      id: 1,
      name: 'Áî∞‰∏≠Â§™ÈÉé',
      company_name: '„ÉÜ„Çπ„Éà‰ºöÁ§æ',
      job_title: '„Ç®„É≥„Ç∏„Éã„Ç¢',
      email: 'tanaka@test.com',
      phone: '090-1234-5678',
      address: 'Êù±‰∫¨ÈÉΩ',
      notes: '„ÉÜ„Çπ„Éà„Éé„Éº„Éà',
      created_at: '2024-01-01T00:00:00Z',
      updated_at: '2024-01-01T00:00:00Z',
      user_id: 1
    },
    {
      id: 2,
      name: '‰ΩêËó§Ëä±Â≠ê',
      company_name: '„Éá„Ç∂„Ç§„É≥‰ºöÁ§æ',
      job_title: '„Éá„Ç∂„Ç§„Éä„Éº',
      email: 'sato@design.com',
      phone: '090-9876-5432',
      address: 'Â§ßÈò™Â∫ú',
      notes: '„Éá„Ç∂„Ç§„É≥„ÅÆÂ∞ÇÈñÄÂÆ∂',
      created_at: '2024-01-02T00:00:00Z',
      updated_at: '2024-01-02T00:00:00Z',
      user_id: 1
    }
  ];

  const mockFilterHook = {
    filter: { search: '', tags: [] },
    filteredCards: mockBusinessCards,
    updateFilter: jest.fn(),
    clearFilter: jest.fn(),
    hasActiveFilters: false
  };

  const mockModalHook = {
    isOpen: false,
    data: null,
    openModal: jest.fn(),
    closeModal: jest.fn()
  };

  beforeEach(() => {
    jest.clearAllMocks();
    mockUseBusinessCardFilter.mockReturnValue(mockFilterHook);
    mockUseModal.mockReturnValue(mockModalHook);
  });

  describe('Âü∫Êú¨„É¨„É≥„ÉÄ„É™„É≥„Ç∞', () => {
    it('ÂêçÂà∫„É™„Çπ„Éà„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      expect(screen.getByText('Áî∞‰∏≠Â§™ÈÉé')).toBeInTheDocument();
      expect(screen.getByText('‰ΩêËó§Ëä±Â≠ê')).toBeInTheDocument();
      expect(screen.getByText('„ÉÜ„Çπ„Éà‰ºöÁ§æ')).toBeInTheDocument();
      expect(screen.getByText('„Éá„Ç∂„Ç§„É≥‰ºöÁ§æ')).toBeInTheDocument();
    });

    it('Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Éº„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // SearchFilter„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºàË§áÊï∞„ÅÆtextbox„Åå„ÅÇ„ÇãÔºâ
      expect(screen.getAllByRole('textbox')).toHaveLength(4);
    });

    it('Á©∫„ÅÆÂêçÂà∫„É™„Çπ„Éà„ÅßÈÅ©Âàá„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseBusinessCardFilter.mockReturnValue({
        ...mockFilterHook,
        filteredCards: []
      });

      render(<BusinessCardListContainer businessCards={[]} />);

      expect(screen.getByText('üìá „Åæ„Å†ÂêçÂà∫„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')).toBeInTheDocument();
    });

    it('„Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®ÊôÇ„Å´Ë©≤ÂΩì„Å™„Åó„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      mockUseBusinessCardFilter.mockReturnValue({
        ...mockFilterHook,
        filteredCards: [],
        hasActiveFilters: true
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      expect(screen.getByText('üîç Ê§úÁ¥¢Êù°‰ª∂„Å´Âêà„ÅÜÂêçÂà∫„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü')).toBeInTheDocument();
      expect(screen.getAllByRole('button', { name: '„Éï„Ç£„É´„Çø„Éº„Çí„ÇØ„É™„Ç¢' })).toHaveLength(2);
    });
  });

  describe('„Éï„Ç£„É´„Çø„ÉºÊ©üËÉΩ', () => {
    it('useBusinessCardFilter„Éï„ÉÉ„ÇØ„ÅåÊ≠£„Åó„ÅèÂëº„Å≥Âá∫„Åï„Çå„Çã', () => {
      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      expect(mockUseBusinessCardFilter).toHaveBeenCalledWith(mockBusinessCards);
    });

    it('„Éï„Ç£„É´„Çø„Éº„ÇØ„É™„Ç¢„Éú„Çø„É≥„ÅåÂãï‰Ωú„Åô„Çã', async () => {
      const user = userEvent.setup();
      const mockClearFilter = jest.fn();

      mockUseBusinessCardFilter.mockReturnValue({
        ...mockFilterHook,
        filteredCards: [],
        hasActiveFilters: true,
        clearFilter: mockClearFilter
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      await user.click(screen.getAllByRole('button', { name: '„Éï„Ç£„É´„Çø„Éº„Çí„ÇØ„É™„Ç¢' })[0]);
      expect(mockClearFilter).toHaveBeenCalled();
    });
  });

  describe('ÂâäÈô§Ê©üËÉΩ', () => {
    it('ÂâäÈô§„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ„Åß„É¢„Éº„ÉÄ„É´„ÅåÈñã„Åè', async () => {
      const user = userEvent.setup();
      const mockOpenModal = jest.fn();

      mockUseModal.mockReturnValue({
        ...mockModalHook,
        openModal: mockOpenModal
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // ÊúÄÂàù„ÅÆÂêçÂà∫„ÅÆÂâäÈô§„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const deleteButtons = screen.getAllByText('ÂâäÈô§');
      await user.click(deleteButtons[0]);

      expect(mockOpenModal).toHaveBeenCalledWith(mockBusinessCards[0]);
    });

    it('ÂâäÈô§Á¢∫Ë™ç„ÅßAPIÂëº„Å≥Âá∫„Åó„Å®„Éö„Éº„Ç∏„É™„É≠„Éº„Éâ„ÅåÂÆüË°å„Åï„Çå„Çã', async () => {
      const user = userEvent.setup();
      mockDeleteBusinessCard.mockResolvedValueOnce(undefined);
      const mockCloseModal = jest.fn();

      mockUseModal.mockReturnValue({
        ...mockModalHook,
        isOpen: true,
        data: mockBusinessCards[0],
        closeModal: mockCloseModal
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // „É¢„Éº„ÉÄ„É´ÂÜÖ„ÅÆÂâäÈô§Á¢∫Ë™ç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const modal = screen.getByRole('dialog');
      const deleteButton = modal.querySelector('button.btn-danger');
      expect(deleteButton).toBeInTheDocument();
      await user.click(deleteButton!);

      await waitFor(() => {
        expect(mockDeleteBusinessCard).toHaveBeenCalledWith(1);
        expect(mockCloseModal).toHaveBeenCalled();
        expect(mockReload).toHaveBeenCalled();
      });
    });

    it('ÂâäÈô§„Ç®„É©„ÉºÊôÇ„Å´„É¢„Éº„ÉÄ„É´„ÅåÈñâ„Åò„Çâ„Çå„Çã', async () => {
      const user = userEvent.setup();
      const consoleError = jest.spyOn(console, 'error').mockImplementation(() => {});
      mockDeleteBusinessCard.mockRejectedValueOnce(new Error('ÂâäÈô§„Ç®„É©„Éº'));
      const mockCloseModal = jest.fn();

      mockUseModal.mockReturnValue({
        ...mockModalHook,
        isOpen: true,
        data: mockBusinessCards[0],
        closeModal: mockCloseModal
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // „É¢„Éº„ÉÄ„É´ÂÜÖ„ÅÆÂâäÈô§Á¢∫Ë™ç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const modal = screen.getByRole('dialog');
      const deleteButton = modal.querySelector('button.btn-danger');
      await user.click(deleteButton!);

      await waitFor(() => {
        expect(consoleError).toHaveBeenCalledWith('ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', expect.any(Error));
        expect(mockCloseModal).toHaveBeenCalled();
      });

      consoleError.mockRestore();
    });

    it('ÂâäÈô§„Ç≠„É£„É≥„Çª„É´„Åß„É¢„Éº„ÉÄ„É´„ÅåÈñâ„Åò„Çã', async () => {
      const user = userEvent.setup();
      const mockCloseModal = jest.fn();

      mockUseModal.mockReturnValue({
        ...mockModalHook,
        isOpen: true,
        data: mockBusinessCards[0],
        closeModal: mockCloseModal
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      await user.click(screen.getByRole('button', { name: '„Ç≠„É£„É≥„Çª„É´' }));
      expect(mockCloseModal).toHaveBeenCalled();
    });
  });

  describe('Container/PresentationalÂàÜÈõ¢', () => {
    it('„Éì„Ç∏„Éç„Çπ„É≠„Ç∏„ÉÉ„ÇØÔºàÂâäÈô§Âá¶ÁêÜÔºâ„ÅåÊ≠£„Åó„ÅèÂÆüË£Ö„Åï„Çå„Çã', async () => {
      const user = userEvent.setup();
      mockDeleteBusinessCard.mockResolvedValueOnce(undefined);

      mockUseModal.mockReturnValue({
        ...mockModalHook,
        isOpen: true,
        data: mockBusinessCards[1] // 2Áï™ÁõÆ„ÅÆ„Ç´„Éº„Éâ
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // „É¢„Éº„ÉÄ„É´ÂÜÖ„ÅÆÂâäÈô§Á¢∫Ë™ç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const modal = screen.getByRole('dialog');
      const deleteButton = modal.querySelector('button.btn-danger');
      await user.click(deleteButton!);

      await waitFor(() => {
        expect(mockDeleteBusinessCard).toHaveBeenCalledWith(2); // Ê≠£„Åó„ÅÑID„ÅåÊ∏°„Åï„Çå„Çã
      });
    });

    it('„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥Â±§„Å´Ê≠£„Åó„ÅÑprops„ÅåÊ∏°„Åï„Çå„Çã', () => {
      const customFilterHook = {
        ...mockFilterHook,
        filteredCards: [mockBusinessCards[0]], // 1‰ª∂„ÅÆ„Åø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        hasActiveFilters: true
      };

      mockUseBusinessCardFilter.mockReturnValue(customFilterHook);

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„ÅüÁµêÊûú„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText('Áî∞‰∏≠Â§™ÈÉé')).toBeInTheDocument();
      expect(screen.queryByText('‰ΩêËó§Ëä±Â≠ê')).not.toBeInTheDocument();
    });
  });

  describe('hooks„Å®„ÅÆÁµ±Âêà', () => {
    it('useBusinessCardFilter„ÅÆÊàª„ÇäÂÄ§„ÅåÊ≠£„Åó„Åè‰ΩøÁî®„Åï„Çå„Çã', () => {
      const mockFilter = { search: '„ÉÜ„Çπ„Éà', tags: ['React'] };
      const mockUpdateFilter = jest.fn();

      mockUseBusinessCardFilter.mockReturnValue({
        filter: mockFilter,
        filteredCards: [mockBusinessCards[0]],
        updateFilter: mockUpdateFilter,
        clearFilter: jest.fn(),
        hasActiveFilters: true
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // SearchFilter„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´Ê≠£„Åó„ÅÑprops„ÅåÊ∏°„Åï„Çå„Çã„Åì„Å®„ÇíÈñìÊé•ÁöÑ„Å´Á¢∫Ë™ç
      expect(screen.getByText('Áî∞‰∏≠Â§™ÈÉé')).toBeInTheDocument();
      expect(screen.queryByText('‰ΩêËó§Ëä±Â≠ê')).not.toBeInTheDocument();
    });

    it('useModal„ÅÆÊàª„ÇäÂÄ§„ÅåÊ≠£„Åó„Åè‰ΩøÁî®„Åï„Çå„Çã', () => {
      const mockData = mockBusinessCards[0];

      mockUseModal.mockReturnValue({
        isOpen: true,
        data: mockData,
        openModal: jest.fn(),
        closeModal: jest.fn()
      });

      render(<BusinessCardListContainer businessCards={mockBusinessCards} />);

      // „É¢„Éº„ÉÄ„É´„ÅåÈñã„ÅÑ„Å¶„ÅÑ„ÇãÁä∂ÊÖã„Åß„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åå„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã
      expect(screen.getByRole('dialog')).toBeInTheDocument();
    });
  });
});
